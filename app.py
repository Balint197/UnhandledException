import chainlit as cl
from chainlit.prompt import Prompt, PromptMessage
from chainlit.playground.providers.openai import ChatOpenAI
import re, json, requests
from datetime import datetime, timedelta

from openai import AsyncOpenAI
import re, json, os

client = AsyncOpenAI(api_key="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")


systemPromptBeforeBudget = """Te egy seg√≠t≈ëk√©sz √©s nagyon kedves p√©nz√ºgyi k√∂lts√©gvet√©si tervez≈ë asszisztens vagy. 
A c√©lod az, hogy megk√©rdezd a felhaszn√°l√≥t a p√©nz√ºgyi helyzet√ºkr≈ël, √©s k√©rd√©sekkel der√≠tsd ki r√≥luk a 
k√∂vetkez≈ë inform√°ci√≥kat: havi hitel√∂sszeg, nyaral√°si k√∂lts√©g, havi fizet√©s. Ha a felhaszn√°l√≥ r√©szletekben adja meg ezen 
inform√°ci√≥kat, gy≈ëz≈ëdj meg r√≥la, hogy √∂sszeadod azokat, √©s csak a teljes k√∂lts√©get add vissza eredm√©nyk√©nt. 
Amint kider√ºlnek ezek az inform√°ci√≥k, add form√°zd a megadott m√≥don. Ne haszn√°lj k√ºl√∂nleges szimb√≥lumokat a 
p√©nznemre, csak a sz√°mokat add vissza. Ha az √©rt√©kek nismeretlenek vagy nulla, √≠rj 0-t. Ne pr√≥b√°lj v√°laszolni 
a kimenettel, miel≈ëtt minden olyan k√©rd√©st feltenn√©l, amire sz√ºks√©ged van a k√≠v√°nt inform√°ci√≥k megszerz√©s√©hez.
K√≠v√°nt kimeneti form√°tum: JSON, ahol a kulcsok a k√∂vetkez≈ëk: vak√°ci√≥, nyaral√°s, hitel. 
Az √©rt√©kek legyenek a megfelel≈ë sz√°mszer≈± √©rt√©kek. 
Miut√°n visszaadtad a kimenetet, a felhaszn√°l√≥ k√©rd√©seire egy p√©nz√ºgyi k√∂lts√©gvet√©si tervez≈ë asszisztens szerep√©ben v√°laszolj.
Amennyiben sz√ºks√©ges, haszn√°ld a rendelkez√©sedre √°ll√≥ eszk√∂z√∂ket. 
"""


gotBudgetStatus: bool = False
# budgetRegex: re.Pattern = re.compile("\{(?:vacation|salary|loan): \d+(?:, (?:vacation|salary|loan): \d+)*\}")
budget_json = None


settings = {
    "model": "gpt-4-1106-preview",
    # "model": "gpt-3.5-turbo",
    "temperature": 0.2,
    "max_tokens": 256,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": ["```"],
    "tools": tools,
    "tool_choice": "auto",
}


def get_conversion_rate_of_currencies(currency_1, currency_2):
    """Get the current conversion rate between two currencies"""
    currency_1 = currency_1.upper()
    currency_2 = currency_2.upper()
    api_key = "cur_live_O8lr4Uj4Nq0TeugOVUwxDg7ruGMhclEJtFTFsfGr"  #your https://currencyapi.com/docs/convert API key
    url = "https://api.currencyapi.com/v3/latest"
    headers = {
        'apikey': api_key,
        'value' : '1',
        'base_currency' : currency_1,
        'currencies' : currency_2
    }
    try:
        response = requests.request("GET", url, headers=headers)
        val = response.json()['data'][currency_2]['value']
        weather_info = {
            "Currency 1": currency_1,
            "Currency 2": currency_2,
            "Conversion rate": str(val),
        }
    except Exception as e:
        print(e)
        currency_info = {
            "Currency 1": currency_1,
            "Currency 2": currency_2,
            "Conversion rate": "Unknown",
        }

    return json.dumps(currency_info)


def get_balance_of_latest_month():
    """Get the balance of my incomes and expenditures from the latest month"""
    m = datetime.today().month - 2
    month = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][m]
    balance_info = {
            "Month": month,
            "Net": "120000",
        }
    return json.dumps(balance_info)
    


tools = [
    {
        "type": "function",
        "function": {
            "name": "get_conversion_rate_of_currencies",
            "description": "Megadja az √°tv√°lt√°si ar√°nyt k√©t p√©nznem k√∂z√∂tt",
            "parameters": {
                "type": "object",
                "properties": {
                    "currency_1": {
                        "type": "string",
                        "description": "Az els≈ë p√©nznem jele",
                    },
                    "currency_2": {
                        "type": "string",
                        "description": "A m√°sodik p√©nznem jele",
                    },
                },
                "required": ["currency_1", "currency_2"],
            },
        },
    },
    {
        "type": "function",
        "function": {
            "name": "get_balance_of_latest_month",
            "description": "A legut√≥bbi h√≥napban keletkezett bev√©telek √©s kiad√°sok egyenleg√©t adja meg",
            "parameters": {},
            },
        },
    }
]



@cl.on_chat_start
async def start_chat():
    cl.user_session.set(
        "message_history",
        [{"role": "system", "content": systemPromptBeforeBudget}],
    )

    msg = cl.Message(
        content="Szia, a p√©nz√ºgyeid tervez√©s√©ben szeretn√©k seg√≠teni üòä El≈ësz√∂r k√©rlek, mond meg nekem, mennyi a havi hitelt√∂rleszt≈ëd √∂sszege!",
    )

    await msg.send()

@cl.on_message
async def main(message: cl.Message):
    global gotBudgetStatus
    message_history = cl.user_session.get("message_history")
    message_history.append(
        {
            "role": "user",
            "content": message.content,
        }
    )

    msg = cl.Message(content="")
    await msg.send()

    stream = await client.chat.completions.create(
        messages=message_history, stream=True, **settings
    )

    async for part in stream:
        if token := part.choices[0].delta.content or "":
            await msg.stream_token(token)

    message_history.append({"role": "assistant", "content": msg.content})
    await msg.update()

    if extract_json_from_string(msg.content) != None:
        budget_json = extract_json_from_string(msg.content)
        gotBudgetStatus = True



def extract_json_from_string(input_string):
    # Find the start and end indices of the JSON object
    start_index = input_string.find("{")
    end_index = input_string.rfind("}")

    # Check if both start and end indices are found
    if start_index != -1 and end_index != -1:
        # Extract the JSON object substring
        json_str = input_string[start_index : end_index + 1]

        try:
            # Parse the JSON object
            json_data = json.loads(json_str)
            return json_data
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON: {e}")
