import chainlit as cl
from chainlit.prompt import Prompt, PromptMessage
from chainlit.playground.providers.openai import ChatOpenAI
import re, json, requests
from datetime import datetime, timedelta
import ast
from openai import AsyncOpenAI
import re, json, os

from tools import (
    get_conversion_rate_of_currencies,
    get_balance_of_latest_month,
    store_budget,
    calculate_budget,
)


client = AsyncOpenAI(api_key="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")


systemPromptBeforeBudget = """Te egy seg√≠t≈ëk√©sz √©s nagyon kedves p√©nz√ºgyi k√∂lts√©gvet√©si tervez≈ë asszisztens vagy. 
A c√©lod az, hogy megk√©rdezd a felhaszn√°l√≥t a p√©nz√ºgyi helyzet√ºkr≈ël, √©s k√©rd√©sekkel der√≠tsd ki r√≥luk a 
k√∂vetkez≈ë inform√°ci√≥kat: havi hitel√∂sszeg, nyaral√°si k√∂lts√©g, havi fizet√©s. Ha a felhaszn√°l√≥ r√©szletekben adja meg ezen 
inform√°ci√≥kat, gy≈ëz≈ëdj meg r√≥la, hogy √∂sszeadod azokat, √©s csak a teljes k√∂lts√©get add vissza eredm√©nyk√©nt. 
Amint kider√ºlnek ezek az inform√°ci√≥k, t√°rold el azokat. 
"""

# , form√°zd a megadott m√≥don. Ne haszn√°lj k√ºl√∂nleges szimb√≥lumokat a
# p√©nznemre, csak a sz√°mokat add vissza. Ha az √©rt√©kek ismeretlenek vagy nulla, √≠rj 0-t. Ne pr√≥b√°lj v√°laszolni
# a kimenettel, miel≈ëtt minden olyan k√©rd√©st feltenn√©l, amire sz√ºks√©ged van a k√≠v√°nt inform√°ci√≥k megszerz√©s√©hez.
# K√≠v√°nt kimeneti form√°tum: JSON, ahol a kulcsok a k√∂vetkez≈ëk: vak√°ci√≥, nyaral√°s, hitel.
# Az √©rt√©kek legyenek a megfelel≈ë sz√°mszer≈± √©rt√©kek.
# Miut√°n visszaadtad a kimenetet, a felhaszn√°l√≥ k√©rd√©seire egy p√©nz√ºgyi k√∂lts√©gvet√©si tervez≈ë asszisztens szerep√©ben v√°laszolj.
# Amennyiben sz√ºks√©ges, haszn√°ld a rendelkez√©sedre √°ll√≥ eszk√∂z√∂ket.

MAX_ITER = 5
gotBudgetStatus: bool = False
# budgetRegex: re.Pattern = re.compile("\{(?:vacation|salary|loan): \d+(?:, (?:vacation|salary|loan): \d+)*\}")
budget_json = None


tools = [
    {
        "type": "function",
        "function": {
            "name": "get_conversion_rate_of_currencies",
            "description": "Megadja az √°tv√°lt√°si ar√°nyt k√©t p√©nznem k√∂z√∂tt",
            "parameters": {
                "type": "object",
                "properties": {
                    "currency_1": {
                        "type": "string",
                        "description": "Az els≈ë p√©nznem jele",
                    },
                    "currency_2": {
                        "type": "string",
                        "description": "A m√°sodik p√©nznem jele",
                    },
                },
                "required": ["currency_1", "currency_2"],
            },
        },
    },
    {
        "type": "function",
        "function": {
            "name": "store_budget",
            "description": "Elt√°rolja a k√∂lts√©gvet√©si adatokat",
            "parameters": {
                "type": "object",
                "properties": {
                    "vakacio": {
                        "type": "number",
                        "description": "A vak√°ci√≥ k√∂lts√©ge",
                    },
                    "fizetes": {
                        "type": "number",
                        "description": "A havi fizet√©s",
                    },
                    "torleszto": {
                        "type": "number",
                        "description": "A havi t√∂rleszt≈ër√©szlet",
                    },
                },
                "required": ["vakacio", "fizetes", "torleszto"],
            },
        },
    },
    {
        "type": "function",
        "function": {
            "name": "calculate_budget",
            "description": "Kisz√°molja a felhaszn√°l√≥ k√∂lts√©gvet√©s√©t, √©s visszaadja a havi fennmaradt k√∂lts√©gvet√©st",
            "parameters": {
                "type": "object",
                "properties": {},
            },
        },
    },
    {
        "type": "function",
        "function": {
            "name": "get_balance_of_latest_month",
            "description": "A legut√≥bbi h√≥napban keletkezett bev√©telek √©s kiad√°sok egyenleg√©t adja meg",
            "parameters": {
                "type": "object",
                "properties": {},
            },
        },
    },
]


@cl.on_chat_start
async def start_chat():
    cl.user_session.set(
        "message_history",
        [{"role": "system", "content": systemPromptBeforeBudget}],
    )

    msg = cl.Message(
        content="Szia, a p√©nz√ºgyeid tervez√©s√©ben szeretn√©k seg√≠teni üòä El≈ësz√∂r k√©rlek, mond meg nekem, mennyi a havi hitelt√∂rleszt≈ëd √∂sszege!",
    )

    await msg.send()


@cl.on_message
async def main(message: cl.Message):
    global gotBudgetStatus, settings, budget_json
    message_history = cl.user_session.get("message_history")
    message_history.append(
        {
            "role": "user",
            "content": message.content,
        }
    )

    cur_iter = 0

    while cur_iter < MAX_ITER:
        settings = {
            "model": "gpt-4-1106-preview",
            # "model": "gpt-3.5-turbo",
            "temperature": 0.2,
            "max_tokens": 256,
            "top_p": 1,
            "frequency_penalty": 0,
            "presence_penalty": 0,
            "stop": ["```"],
            "tools": tools,
            "tool_choice": "auto",
        }

        prompt = Prompt(
            provider="openai-chat",
            messages=[
                PromptMessage(
                    formatted=m["content"], name=m.get("name"), role=m["role"]
                )
                for m in message_history
            ],
            settings=settings,
        )

        response = await client.chat.completions.create(
            messages=message_history, **settings
        )

        message = response.choices[0].message

        prompt.completion = message.content or ""

        root_msg_id = await cl.Message(
            prompt=prompt, author=message.role, content=prompt.completion
        ).send()

        if not message.tool_calls:
            break

        for tool_call in message.tool_calls:
            if tool_call.type == "function":
                function_name = tool_call.function.name
                arguments = ast.literal_eval(tool_call.function.arguments)
                await cl.Message(
                    author=function_name,
                    content=str(tool_call.function),
                    language="json",
                    parent_id=root_msg_id,
                ).send()

                if function_name == "get_conversion_rate_of_currencies":
                    function_response = get_conversion_rate_of_currencies(
                        arguments.get("currency_1"), arguments.get("currency_2")
                    )
                if function_name == "store_budget":
                    function_response = store_budget(
                        arguments.get("vakacio"),
                        arguments.get("fizetes"),
                        arguments.get("torleszto"),
                    )
                    budget_json = function_response

                if function_name == "calculate_budget":
                    function_response = calculate_budget(budget_json)

                if function_name == "get_balance_of_latest_month":
                    function_response = get_balance_of_latest_month()

                message_history.append(
                    {
                        "role": "function",
                        "name": function_name,
                        "content": function_response,
                        "tool_call_id": tool_call.id,
                    }
                )

                await cl.Message(
                    author=function_name,
                    content=str(function_response),
                    language="json",
                    parent_id=root_msg_id,
                ).send()
        cur_iter += 1
